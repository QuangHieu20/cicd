name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ==================== BUILD & TEST ====================
  build:
    name: Build & Test
    runs-on: self-hosted
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🏗️ Test Build Backend
      run: |
        cd backend
        docker build -f ../.docker/backend/Dockerfile .
    
    - name: 🏗️ Test Build Frontend
      run: |
        cd frontend
        docker build -f ../.docker/frontend/Dockerfile .
    
    - name: ✅ Build Test Completed
      run: echo "Build test completed successfully!"

  # ==================== DEPLOY ====================
  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 🚀 Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          # Navigate to project directory
          cd /home/${{ secrets.VPS_USERNAME }}/cicd || { 
            echo "Creating project directory..."
            mkdir -p /home/${{ secrets.VPS_USERNAME }}/cicd
            cd /home/${{ secrets.VPS_USERNAME }}/cicd
            git clone https://github.com/${{ github.repository }} .
          }
          
          # Pull latest code
          echo "📥 Pulling latest code..."
          git pull origin main
          
          # Stop existing containers
          echo "⏹️ Stopping existing containers..."
          docker-compose down || true
          
          # Remove old images to save space
          echo "🧹 Cleaning old images..."
          docker image prune -f || true
          
          # Build and start with production environment
          echo "🚀 Building and starting containers..."
          API_URL=http://${{ secrets.VPS_HOST }}:3000 NODE_ENV=production docker-compose build --no-cache
          API_URL=http://${{ secrets.VPS_HOST }}:3000 NODE_ENV=production docker-compose up -d
          
          # Health check
          echo "🏥 Performing health check..."
          sleep 30
          curl -f http://localhost:3000/health || { echo "Health check failed"; exit 1; }
          
          echo "✅ Deployment completed successfully!"
          echo "🌐 Frontend: http://${{ secrets.VPS_HOST }}:3001"
          echo "🌐 Backend: http://${{ secrets.VPS_HOST }}:3000"
